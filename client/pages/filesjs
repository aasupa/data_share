// import { useEffect, useState } from 'react';
// import axios from 'axios';
// import styles from '../styles/files.module.css';

// export default function Files() {
//   const [files, setFiles] = useState([]);
//   const [currentFolder, setCurrentFolder] = useState(null); // Null represents the root folder
//   const [folders, setFolders] = useState([]);
//   const [newFolderName, setNewFolderName] = useState('');
//   const [selectedFile, setSelectedFile] = useState(null);
//   const [uploadFile, setUploadFile] = useState(null);
//   const [user, setUser] = useState({ username: '', avatar: '' });
//   const token = typeof window !== 'undefined' ? localStorage.getItem('token') : '';

//   useEffect(() => {
//     const fetchFiles = async () => {
//       try {
//         const { data } = await axios.get('http://localhost:3001/api/files', {
//           headers: { 'x-access-token': token },
//         });
//         setFiles(data);
//       } catch (error) {
//         console.error(error);
//       }
//     };

//     const fetchUser = async () => {
//       try {
//         const { data } = await axios.get('http://localhost:3001/api/user', {
//           headers: { 'x-access-token': token },
//         });
//         setUser(data);
//       } catch (error) {
//         console.error(error);
//       }
//     };

//     const fetchFolderContents = async () => {
//       try {
//         const { data } = await axios.get(`http://localhost:3001/api/folders/${currentFolder}/contents`);
//         setFolders(data.folders);
//         setFiles(data.files);
//       } catch (error) {
//         console.error(error);
//       }
//     };
//     fetchFolderContents();
//     fetchFiles();
//     fetchUser();
//   }, [token,currentFolder]);

//   const handleUpload = async (e) => {
//     e.preventDefault();
//     const formData = new FormData();
//     formData.append('file', uploadFile);

//     try {
//       await axios.post('http://localhost:3001/api/upload', formData, {
//         headers: {
//           'x-access-token': token,
//           'Content-Type': 'multipart/form-data',
//         },
//       });
//       setUploadFile(null);
//       const { data } = await axios.get('http://localhost:3001/api/files', {
//         headers: { 'x-access-token': token },
//       });
//       setFiles(data);
//     } catch (error) {
//       console.error(error);
//     }
//   };


//   const handleCreateFolder = async (e) => {
//     e.preventDefault();
//     try {
//       await axios.post('http://localhost:3001/api/folders', {
//         name: newFolderName,
//         parent: currentFolder || 'root',
//       }, {
//         headers: { 'x-access-token': token },
//       });
//       setNewFolderName('');
//       const { data } = await axios.get(`http://localhost:3001/api/folders/${currentFolder}/contents`); // Refresh folder list after creation
//     } catch (error) {
//       console.error(error);
//     }
//   };

//   const handleNavigate = (folderId) => {
//     setCurrentFolder(folderId);
//   };


//   const handleDownload = async (fileId) => {
//     try {
//       const response = await axios.get(`http://localhost:3001/api/files/${fileId}/download`, {
//         headers: { 'x-access-token': token },
//         responseType: 'blob',
//       });

//       const disposition = response.headers['content-disposition'];
//       const filename = disposition
//         ? disposition.split('filename=')[1].replace(/['"]/g, '')
//         : `file_${fileId}`;

//       const url = window.URL.createObjectURL(new Blob([response.data], { type: response.headers['content-type'] }));
//       const link = document.createElement('a');
//       link.href = url;
//       link.setAttribute('download', filename);
//       document.body.appendChild(link);
//       link.click();
//       document.body.removeChild(link);
//     } catch (error) {
//       console.error('Error downloading file:', error);
//     }
//   };


//   const handleView = async(fileId) => {
//     try {
//       // Fetch the file, but instead of downloading, we create a blob URL for viewing.
//       const response = await axios.get(`http://localhost:3001/api/files/${fileId}/download`, {
//         headers: { 'x-access-token': token },
//         responseType: 'blob', // Important: we still expect a binary file
//       });
  
//       // Create a URL for the blob
//       const url = window.URL.createObjectURL(new Blob([response.data], { type: response.headers['content-type'] }));
      
//       // Open the file in a new browser tab
//       window.open(url, '_blank');
//     } catch (error) {
//       console.error("Error viewing file:", error);
//     }
//   };


//   const handleDelete = async (fileId) => {
//     try {
//       await axios.delete(`http://localhost:3001/api/files/${fileId}`, {
//         headers: { 'x-access-token': token },
//       });

//       // Refresh file list after deleting
//       setFiles((prevFiles) => prevFiles.filter((file) => file._id !== fileId));
//     } catch (error) {
//       console.error('Error deleting file:', error);
//     }
//   };

//   // return (
//   //   <div className={styles.dashboard}>
//   //     <nav className={styles.navbar}>
//   //       <h2>Dashboard</h2>
//   //       <div className={styles.user}>
//   //         <img src={user.avatar} alt="User avatar" className={styles.avatar} />
//   //         <span>{user.username}</span>
//   //       </div>
//   //     </nav>
//   //     <div className={styles.container}>
//   //       <form onSubmit={handleUpload} className={styles.form}>
//   //         <h1>Upload File</h1>
//   //         <input
//   //           type="file"
//   //           onChange={(e) => setUploadFile(e.target.files ? e.target.files[0] : null)}
//   //         />
//   //         <button type="submit">Upload</button>
//   //       </form>
//   //       <div className={styles.fileList}>
//   //         <h2>File List</h2>
//   //         <ul>
//   //           {files.map((file) => (
//   //             <li key={file._id}>
//   //               <span>{file.originalname}</span>
//   //               <span className={styles.username}>Uploaded by: {file.uploader.username}</span>
//   //               <div>
//   //                 <button onClick={() => handleDownload(file._id)}>Download</button>
//   //                 <button onClick={() => handleView(file._id)}>View</button> 
//   //                 {/* <button onClick={() => handleDelete(file._id)}>Delete</button>  */}
//   //                 <button className={styles.deleteButton} onClick={() => handleDelete(file._id)}>Delete</button>               
//   //               </div>
//   //             </li>
//   //           ))}
//   //         </ul>
//   //       </div>
//   //     </div>
//   //   </div>
//   // );

//   return (
//     <div className={styles.dashboard}>
//       <nav className={styles.navbar}>
//         <h2>Dashboard</h2>
//         <div className={styles.user}>
//           <img src={user.avatar} alt="User avatar" className={styles.avatar} />
//           <span>{user.username}</span>
//         </div>
//       </nav>
//       <div className={styles.container}>
//         <div className={styles.folderActions}>
//           <form onSubmit={handleCreateFolder} className={styles.createFolderForm}>
//             <h1>Create New Folder</h1>
//             <input
//               type="text"
//               value={newFolderName}
//               onChange={(e) => setNewFolderName(e.target.value)}
//               placeholder="Folder name"
//               required
//             />
//             <button type="submit">Create Folder</button>
//           </form>

//           <form onSubmit={handleUpload} className={styles.uploadForm}>
//             <h1>Upload File</h1>
//             <input
//               type="file"
//               onChange={(e) => setUploadFile(e.target.files ? e.target.files[0] : null)}
//             />
//             <button type="submit">Upload</button>
//           </form>
//         </div>

//         <div className={styles.fileList}>
//           <h2>Files</h2>
//           <ul>
//             {folders.map((folder) => (
//               <li key={folder._id} className={styles.folderItem}>
//                 <button onClick={() => handleNavigate(folder._id)}>{folder.name}</button>
//               </li>
//             ))}
//           </ul>

//           <ul>
//             {files.map((file) => (
//               <li key={file._id}>
//                 <span>{file.originalname}</span>
//                 <span className={styles.username}>Uploaded by: {file.uploader.username}</span>
//                 <div>
//                   <button onClick={() => handleDownload(file._id)}>Download</button>
//                   <button onClick={() => handleView(file._id)}>View</button>
//                   <button className={styles.deleteButton} onClick={() => handleDelete(file._id)}>Delete</button>
//                 </div>
//               </li>
//             ))}
//           </ul>
//         </div>
//       </div>
//     </div>
//   );
// }

import { useEffect, useState } from 'react';
import axios from 'axios';
import styles from '../styles/files.module.css';

export default function Files() {
  const [files, setFiles] = useState([]);
  const [currentFolder, setCurrentFolder] = useState(null); // Null represents the root folder
  const [folders, setFolders] = useState([]);
  const [newFolderName, setNewFolderName] = useState('');
  const [uploadFile, setUploadFile] = useState(null);
  const [user, setUser] = useState({ username: '', avatar: '' });
  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : '';

  // Fetch folder contents based on current folder
  useEffect(() => {
    const fetchContents = async () => {
      const folderId = currentFolder === null ? '' : currentFolder;
      try {
        const { data } = await axios.get(`http://localhost:3001/api/folders/${folderId}/contents`, {
          headers: { 'x-access-token': token },
        });
        setFolders(data.folders);
        setFiles(data.files);
      } catch (error) {
        console.error('Error fetching contents:', error);
      }
    };

    const fetchUser = async () => {
      try {
        const { data } = await axios.get('http://localhost:3001/api/user', {
          headers: { 'x-access-token': token },
        });
        setUser(data);
      } catch (error) {
        console.error('Error fetching user info:', error);
      }
    };

    fetchContents();
    fetchUser();
  }, [currentFolder, token]);

  const handleFolderClick = (folderId) => {
    setCurrentFolder(folderId); // Navigate to the selected folder
  };

  const handleCreateFolder = async (e) => {
    e.preventDefault();
    if (!newFolderName.trim()) return;
    try {
      await axios.post('http://localhost:3001/api/folders', {
        name: newFolderName,
        parentFolderId: currentFolder === null ? '' : currentFolder,
      }, {
        headers: { 'x-access-token': token },
      });
      setNewFolderName('');
      const { data } = await axios.get(`http://localhost:3001/api/folders/${currentFolder || ''}/contents`, {
        headers: { 'x-access-token': token },
      });
      setFolders(data.folders);
      setFiles(data.files);
    } catch (error) {
      console.error('Error creating folder:', error);
    }
  };

  const handleUpload = async (e) => {
    e.preventDefault();
    if (!uploadFile) return;

    const formData = new FormData();
    formData.append('file', uploadFile);
    formData.append('folderId', currentFolder === null ? '' : currentFolder);

    try {
      await axios.post('http://localhost:3001/api/upload', formData, {
        headers: {
          'x-access-token': token,
          'Content-Type': 'multipart/form-data',
        },
      });
      setUploadFile(null);
      const { data } = await axios.get(`http://localhost:3001/api/folders/${currentFolder || ''}/contents`, {
        headers: { 'x-access-token': token },
      });
      setFolders(data.folders);
      setFiles(data.files);
    } catch (error) {
      console.error('Error uploading file:', error);
    }
  };

  const handleDownload = async (fileId) => {
    try {
      const response = await axios.get(`http://localhost:3001/api/files/${fileId}/download`, {
        headers: { 'x-access-token': token },
        responseType: 'blob',
      });

      const disposition = response.headers['content-disposition'];
      const filename = disposition
        ? disposition.split('filename=')[1].replace(/['"]/g, '')
        : `file_${fileId}`;

      const url = window.URL.createObjectURL(new Blob([response.data], { type: response.headers['content-type'] }));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error downloading file:', error);
    }
  };

  const handleView = async (fileId) => {
    try {
      const response = await axios.get(`http://localhost:3001/api/files/${fileId}/download`, {
        headers: { 'x-access-token': token },
        responseType: 'blob',
      });

      const url = window.URL.createObjectURL(new Blob([response.data], { type: response.headers['content-type'] }));
      window.open(url, '_blank');
    } catch (error) {
      console.error('Error viewing file:', error);
    }
  };

  const handleDelete = async (fileId) => {
    try {
      await axios.delete(`http://localhost:3001/api/files/${fileId}`, {
        headers: { 'x-access-token': token },
      });
      setFiles((prevFiles) => prevFiles.filter((file) => file._id !== fileId));
    } catch (error) {
      console.error('Error deleting file:', error);
    }
  };

  return (
    <div className={styles.dashboard}>
      <nav className={styles.navbar}>
        <h2>Dashboard</h2>
        <div className={styles.user}>
          <img src={user.avatar} alt="User avatar" className={styles.avatar} />
          <span>{user.username}</span>
        </div>
      </nav>

      <div className={styles.container}>
        <div className={styles.folderActions}>
          <form onSubmit={handleCreateFolder} className={styles.createFolderForm}>
            <h1>Create New Folder</h1>
            <input
              type="text"
              value={newFolderName}
              onChange={(e) => setNewFolderName(e.target.value)}
              placeholder="Folder name"
              required
            />
            <button type="submit">Create Folder</button>
          </form>

          <form onSubmit={handleUpload} className={styles.uploadForm}>
            <h1>Upload File</h1>
            <input
              type="file"
              onChange={(e) => setUploadFile(e.target.files ? e.target.files[0] : null)}
            />
            <button type="submit">Upload</button>
          </form>

          <h1>Folders</h1>
          <ul>
            {folders.length === 0 ? (
              <p>No folders available</p>
            ) : (
              folders.map((folder) => (
                <li key={folder._id}>
                  <span>📁</span>
                  <button onClick={() => handleFolderClick(folder._id)}>{folder.name}</button>
                </li>
              ))
            )}
          </ul>
        </div>

        <div className={styles.fileList}>
          <h2>Files</h2>
          <ul>
            {files.length === 0 ? (
              <p>No files available</p>
            ) : (
              files.map((file) => (
                <li key={file._id}>
                  <span>{file.originalname}</span>
                  <span className={styles.username}>Uploaded by: {file.uploader.username}</span>
                  <div>
                    <button onClick={() => handleDownload(file._id)}>Download</button>
                    <button onClick={() => handleView(file._id)}>View</button>
                    <button className={styles.deleteButton} onClick={() => handleDelete(file._id)}>Delete</button>
                  </div>
                </li>
              ))
            )}
          </ul>
        </div>
      </div>
    </div>
  );
}
